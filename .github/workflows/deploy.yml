name: Deploy via Ansible

on:
  push:
    branches:
      - main
      - dev
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set environment prefix from branch
        id: env
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "prefix=PROD" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "dev" ]]; then
            echo "prefix=DEV" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "test" ]]; then
            echo "prefix=TEST" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch: $BRANCH"
            exit 1
          fi

      - name: Set server_name based on prefix
        run: |
          if [[ "${{ steps.env.outputs.prefix }}" == "DEV" ]]; then
            echo "SERVER_NAME=dev.classpick.click" >> $GITHUB_ENV
          elif [[ "${{ steps.env.outputs.prefix }}" == "TEST" ]]; then
            echo "SERVER_NAME=test.classpick.click" >> $GITHUB_ENV
          else
            echo "SERVER_NAME=prod.classpick.click" >> $GITHUB_ENV
          fi

      - name: Test SSH to Bastion
        run: |
          echo "🔗 Testing SSH to Bastions"
          nc -zv ${{ vars[format('BASTION_PUBLIC_{0}_01_IP', steps.env.outputs.prefix)] }} 22 || echo "❌ Bastion 1 not reachable"
          nc -zv ${{ vars[format('BASTION_PUBLIC_{0}_02_IP', steps.env.outputs.prefix)] }} 22 || echo "❌ Bastion 2 not reachable"

      - name: Set up Node.js for frontend build
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create .env.production for frontend
        run: echo "REACT_APP_API_URL=/api" > frontend/.env.production

      - name: Build React frontend
        working-directory: ./frontend
        run: |
          npm ci
          CI=false npm run build

      - name: Compress frontend build
        run: tar -czf frontend-build.tar.gz -C frontend/build .

      - name: Move frontend build archive into ansible folder
        run: mv frontend-build.tar.gz ansible/

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci || npm install
          sudo chown -R $USER:$USER node_modules

      - name: Compress backend source
        run: tar -czf backend.tar.gz -C backend .

      - name: Move backend archive into ansible folder
        run: mv backend.tar.gz ansible/

      - name: Create firebase-service-key.json from secret
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_KEY_JSON }}' > ansible/firebase-service-key.json

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_KEY }}" > ~/.ssh/seoul.key.pem
          chmod 600 ~/.ssh/seoul.key.pem
          ssh-keyscan -H ${{ vars[format('BASTION_PUBLIC_{0}_01_IP', steps.env.outputs.prefix)] }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars[format('BASTION_PUBLIC_{0}_02_IP', steps.env.outputs.prefix)] }} >> ~/.ssh/known_hosts
        shell: bash

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Generate Ansible inventory from repository variables
        run: |
          mkdir -p ansible/inventory
          cat <<EOF > ansible/inventory/hosts
          [backend]
          ${{ vars[format('BACKEND_PRIVATE_{0}_01_IP', steps.env.outputs.prefix)] }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/seoul.key.pem ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:22 -i ~/.ssh/seoul.key.pem ec2-user@${{ vars[format('BASTION_PUBLIC_{0}_01_IP', steps.env.outputs.prefix)] }}"'
          ${{ vars[format('BACKEND_PRIVATE_{0}_02_IP', steps.env.outputs.prefix)] }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/seoul.key.pem ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:22 -i ~/.ssh/seoul.key.pem ec2-user@${{ vars[format('BASTION_PUBLIC_{0}_02_IP', steps.env.outputs.prefix)] }}"'

          [frontend]
          ${{ vars[format('FRONTEND_PRIVATE_{0}_01_IP', steps.env.outputs.prefix)] }} ansible_user=ec2-user backend_target_ip=${{ vars[format('BACKEND_PRIVATE_{0}_01_IP', steps.env.outputs.prefix)] }} frontend_domain=frontend01.${{ steps.env.outputs.prefix }}.classpick.click ansible_ssh_private_key_file=~/.ssh/seoul.key.pem ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:22 -i ~/.ssh/seoul.key.pem ec2-user@${{ vars[format('BASTION_PUBLIC_{0}_01_IP', steps.env.outputs.prefix)] }}"'
          ${{ vars[format('FRONTEND_PRIVATE_{0}_02_IP', steps.env.outputs.prefix)] }} ansible_user=ec2-user backend_target_ip=${{ vars[format('BACKEND_PRIVATE_{0}_02_IP', steps.env.outputs.prefix)] }} frontend_domain=frontend02.${{ steps.env.outputs.prefix }}.classpick.click ansible_ssh_private_key_file=~/.ssh/seoul.key.pem ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:22 -i ~/.ssh/seoul.key.pem ec2-user@${{ vars[format('BASTION_PUBLIC_{0}_02_IP', steps.env.outputs.prefix)] }}"'
          EOF
        shell: bash

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook playbook.yml -i inventory
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
